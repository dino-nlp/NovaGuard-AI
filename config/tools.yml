# NOVAGUARD-AI/config/tools.yml
#
# File này cấu hình các dòng lệnh để chạy các công cụ phân tích tĩnh bên ngoài.
# ToolRunner sẽ sử dụng các template này.
#
# Placeholders có sẵn (được thay thế bởi ToolRunner):
#   {project_root}          - Đường dẫn tuyệt đối đến gốc của repository (GITHUB_WORKSPACE).
#   {file_path}             - Đường dẫn tuyệt đối đến file đang được phân tích.
#                             (Sử dụng nếu tool chạy trên từng file).
#   {relative_file_path}    - Đường dẫn tương đối của file từ project_root.
#   {output_file}           - (Nếu có trong command) Đường dẫn đến một file tạm thời
#                             mà tool sẽ ghi output vào. ToolRunner sẽ đọc file này.
#
# Lưu ý: Đảm bảo các tool này được cài đặt trong Docker image của Action.

linters:
  # 'python' là tool_key mà run_tier1_tools_node sẽ dùng để gọi ToolRunner.run
  # cho các file Python.
  python: # Pylint cho Python
    # Pylint output JSON ra stdout.
    # ToolRunner sẽ bắt stdout và parse nếu expect_json_output=True.
    # --rcfile có thể trỏ đến file cấu hình pylint trong repo người dùng hoặc một file mặc định.
    command: "pylint --output-format=json --msg-template='{{line_start}},{{column_offset}}: [{{msg_id}}({{symbol}}), {{obj}}] {{msg}}' --reports=no {file_path} --rcfile={project_root}/.pylintrc"
    # Thêm: --rcfile={project_root}/.pylintrc (nếu muốn người dùng tự config)
    # hoặc --rcfile=/app/config/default_pylintrc (nếu bạn cung cấp rc mặc định)

  # Ví dụ cho ESLint (JavaScript/TypeScript)
  # javascript:
  #   command: "eslint --format json --config {project_root}/.eslintrc.js {file_path}"
  # typescript: # Có thể dùng chung command với javascript nếu eslint config đúng
  #   command: "eslint --format json --config {project_root}/.eslintrc.js {file_path}"


sast: # Static Application Security Testing
  # 'generic_semgrep_project' là tool_key cho một lượt quét Semgrep toàn bộ project.
  # Semgrep sẽ output JSON vào file được chỉ định bởi {output_file}.
  # ToolRunner sẽ đọc file này.
  generic_semgrep_project:
    command: "semgrep scan --config auto --json --output {output_file} --error --verbose {project_root}"
    # '--config auto' tự động tìm rules. Có thể chỉ định ruleset cụ thể:
    # command: "semgrep scan --config 'p/ci' --config 'p/default' --json --output {output_file} {project_root}"

  # Ví dụ: Semgrep cho một file cụ thể nếu cần (ít phổ biến hơn project scan)
  # generic_semgrep_file:
  #   command: "semgrep scan --config auto --json --output {output_file} {file_path}"

# (Tùy chọn) Các loại tool khác
# code_formatters: # Ví dụ, nếu muốn kiểm tra định dạng mà không tự động sửa
#   python_black_check:
#     command: "black --check --diff {file_path}"
#     # Output của black --check không phải JSON, nên expect_json_output=False